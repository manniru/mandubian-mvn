/*
 * BuildPomFromDeps 
 * 
 * Groovy Script building all GDATA Poms from the result of dependency analysis 
 * generated by JBOSS TattleTale.
 * Directly and deeply inspired by David Carter who gratefully proposed
 * his Ruby script on his site http://github.com/dcarter/Google-Data-APIs-Mavenized
 * (great idea to use TattleTale to get dependencies!!!)
 * 
 * I decided to rewrite his Ruby script in Groovy because I wanted everything to 
 * be written in the Maven+Java mood: maven generating maven in a summary...
 * 
 * Important Note on "mvn deploy:deploy-file":
 * You need to have the command "mvn" in your system path: I had to use Java.Runtime 
 * to "system-call" directly "mvn" because I never succeeded to call 
 * "mvn deploy:deploy-file" using MavenEmbedder (I never found a way to set the 
 * "-Dfile" option so deploy-file couldn't work)

 * Note on NexusIndexer called from Maven:
 * I wanted to call NexusIndexer directly from GMaven script (I succeeded to do it 
 * in a simple script). But I encountered some Plexus+Classloader compatibility 
 * issues when trying to instantiate a MavenEmbedder by myself in the current GMaven 
 * context and I couldn't find any PlexusContainer in the M2Eclipse MavenEmbedder 
 * context. As I wanted to propose a real GData maven repository asap, I decided 
 * to go straight even if it is less clean.
 */

def versions = [ 
                 "1.35.1", "1.36.0", "1.37.0", "1.38.0", "1.39.0", "1.39.1",
                 "1.40.0", "1.40.1", "1.40.2", "1.40.3",
                 "1.41.0", "1.41.1", "1.41.2", "1.41.3"
                 ]

def project = [ basedir: ".", build : [ directory : "target" ] ]       
                

def output = ""                

versions.each {
	version ->
	println "Generate Wiki for version ${version}"
	// launches mvn deploy:deploy-file
	try {
		def repoDirName = "${project.basedir}/repository"
		def repoDir = new File(repoDirName)
		def tmpFileName = "${project.build.directory}/artifacts.tmp.txt"
		
		outputLocal = """ 
== Google Delivery Version ${version} == 
You can download official archive [http://gdata-java-client.googlecode.com/files/gdata-src.java-${version}.zip here] 

|| *Maven GroupID* || com.google.gdata || 
|| *Maven Version* || ${version} ||


|| *Maven ArtefactIDs* ||  			
"""
			
		def deps = ""
		def idx = 1
		def nbPerLine = 5
		
		repoDir.eachDirRecurse { 
			def matcher = it =~ /.+repository\/com\/google\/gdata\/(.+)\/(${version})/
			if(matcher.matches()) { 
				def artifact = matcher[0][1]
				deps += "|| "+artifact + " "
				if(!idx.mod(nbPerLine)) deps += "||\n"
					
				idx++
			}
		}
		if(idx.mod(nbPerLine)) deps += "||\n"
		outputLocal += deps
		
		outputLocal += """ \


----
		
"""
		output = outputLocal + output
	}
	catch(IOException ex){
		ex.printStackTrace()
		// if any exception, brutally exits 
		System.exit(0)
	}
}

//writes POM file to target/poms
File wikiFile = new File(project.build.directory, "AvailableVersions.wiki")
if(wikiFile.exists()){
	wikiFile.renameTo(new File(wikiFile.getAbsolutePath()+".backup"))
	wikiFile.delete()
}

wikiFile.write output
